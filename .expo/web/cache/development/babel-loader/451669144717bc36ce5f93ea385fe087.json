{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getDoc } from \"firebase/firestore\";\nimport { Provider } from \"react-redux\";\nimport { collection, addDoc, setDoc, db, doc } from \"./config\";\nexport var fetchUser = function fetchUser(uid) {\n  var docRef, docData, notesCollection;\n  return _regeneratorRuntime.async(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          docRef = doc(db, \"users\", \"\" + uid);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getDoc(docRef));\n\n        case 4:\n          docData = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(collection(db, \"users\", uid + \"/notes\"));\n\n        case 7:\n          notesCollection = _context.sent;\n          console.log(notesCollection);\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\nexport var addUser = function addUser(user) {\n  var displayName, email, uid;\n  return _regeneratorRuntime.async(function addUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          displayName = user.displayName, email = user.email, uid = user.uid;\n          console.log(user);\n          _context2.prev = 2;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(setDoc(doc(db, \"users\", \"\" + uid), {\n            uid: uid,\n            name: displayName || \"\",\n            email: email\n          }));\n\n        case 5:\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](2);\n          console.log(_context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[2, 7]], Promise);\n};","map":{"version":3,"sources":["C:/Users/daxsh/Desktop/Coding Project/React Naative Projects/firenotes/firebase/userfunctions.js"],"names":["getDoc","Provider","collection","addDoc","setDoc","db","doc","fetchUser","uid","docRef","docData","notesCollection","console","log","addUser","user","displayName","email","name"],"mappings":";AAAA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA4BC,MAA5B,EAAoCC,EAApC,EAAwCC,GAAxC;AAGC,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXC,UAAAA,MAFW,GAEFH,GAAG,CAACD,EAAD,EAAK,OAAL,OAAiBG,GAAjB,CAFD;AAAA;AAAA,2CAGIR,MAAM,CAACS,MAAD,CAHV;;AAAA;AAGZC,UAAAA,OAHY;AAAA;AAAA,2CAIUR,UAAU,CAACG,EAAD,EAAK,OAAL,EAAiBG,GAAjB,YAJpB;;AAAA;AAIdG,UAAAA,eAJc;AAKlBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AALkB;AAAA;;AAAA;AAAA;AAAA;AAQjBC,UAAAA,OAAO,CAACC,GAAR;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;AAYR,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,UAAAA,WADY,GACeD,IADf,CACZC,WADY,EACCC,KADD,GACeF,IADf,CACCE,KADD,EACQT,GADR,GACeO,IADf,CACQP,GADR;AAEnBI,UAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AAFmB;AAAA;AAAA,2CAIVX,MAAM,CAACE,GAAG,CAACD,EAAD,EAAK,OAAL,OAAiBG,GAAjB,CAAJ,EAA6B;AACrCA,YAAAA,GAAG,EAAEA,GADgC;AAErCU,YAAAA,IAAI,EAAEF,WAAW,IAAI,EAFgB;AAGrCC,YAAAA,KAAK,EAAEA;AAH8B,WAA7B,CAJI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYfL,UAAAA,OAAO,CAACC,GAAR;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["import { getDoc } from \"firebase/firestore\";\r\nimport { Provider } from \"react-redux\";\r\nimport { collection, addDoc,setDoc, db, doc} from \"./config\";\r\n\r\n\r\n export const fetchUser = async (uid) => {\r\n     try {\r\n         const docRef = doc(db, \"users\", `${uid}`);\r\n        const docData = await getDoc(docRef);\r\n        let notesCollection = await collection(db, \"users\", `${uid}/notes`);\r\n        console.log(notesCollection)\r\n\r\n     } catch (err) {\r\n         console.log(err)\r\n     }\r\n }\r\n\r\nexport const addUser = async (user) => {\r\n    const {displayName, email, uid} = user;\r\n    console.log(user)\r\n    try {\r\n       await setDoc(doc(db, \"users\", `${uid}`), {\r\n           uid: uid,\r\n           name: displayName || \"\",\r\n           email: email\r\n       })\r\n\r\n       \r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}